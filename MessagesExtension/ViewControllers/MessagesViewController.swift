//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Chee Yi Ong on 11/15/16.
//  Copyright Â© 2016 Team ProjectPostcards. All rights reserved.
//

import UIKit
import Messages
import Alamofire
import jot

@objc(MessagesViewController) // Workaround so we can do this without storyboards

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        presentPostcardViewController()
    }

    // MARK: - View set up

    func presentPostcardViewController() {
        let collectionViewController = PostcardPickerViewController(collectionViewLayout: UICollectionViewFlowLayout())
        collectionViewController.view.frame = view.frame

        presentChildViewController(childVC: collectionViewController)
    }

    func presentChildViewController(childVC: UIViewController) {
        // This is how we present view controllers in an iMessage application
        addChildViewController(childVC)
        childVC.didMove(toParentViewController: self)
        view.addSubview(childVC.view)
    }
    
    // MARK: - Conversation Handling

    func sendPostcard(message: MSMessage) {
        activeConversation?.insert(message, completionHandler: nil)
        requestPresentationStyle(.compact)
    }
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
}
